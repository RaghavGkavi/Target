name: Mobile App Build & Deploy

on:
  push:
    branches: [mobile-app, main]
  pull_request:
    branches: [mobile-app, main]
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - production
      platforms:
        description: "Platforms to build"
        required: true
        default: "both"
        type: choice
        options:
          - ios
          - android
          - both

env:
  NODE_VERSION: "18"
  JAVA_VERSION: "17"

jobs:
  build-web:
    name: Build Web Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build web application
        run: npm run build:client

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/spa/
          retention-days: 7

  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: build-web
    if: github.event.inputs.platforms == 'android' || github.event.inputs.platforms == 'both' || github.event.inputs.platforms == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/spa/

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Build Android Debug APK
        if: github.event.inputs.build_type == 'development' || github.event.inputs.build_type == ''
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Build Android Release APK
        if: github.event.inputs.build_type == 'production'
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk
          retention-days: 30

  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: build-web
    if: github.event.inputs.platforms == 'ios' || github.event.inputs.platforms == 'both' || github.event.inputs.platforms == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/spa/

      - name: Sync Capacitor
        run: npx cap sync ios

      - name: Setup iOS Certificate and Provisioning Profile
        if: github.event.inputs.build_type == 'production'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS Debug
        if: github.event.inputs.build_type == 'development' || github.event.inputs.build_type == ''
        run: |
          cd ios
          xcodebuild -workspace App.xcworkspace \
                     -scheme App \
                     -destination 'generic/platform=iOS Simulator' \
                     -derivedDataPath DerivedData \
                     build

      - name: Build iOS Release Archive
        if: github.event.inputs.build_type == 'production'
        run: |
          cd ios
          xcodebuild -workspace App.xcworkspace \
                     -scheme App \
                     -destination 'generic/platform=iOS' \
                     -archivePath App.xcarchive \
                     -derivedDataPath DerivedData \
                     archive

      - name: Export IPA
        if: github.event.inputs.build_type == 'production'
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath App.xcarchive \
                     -exportPath Export \
                     -exportOptionsPlist ../scripts/ExportOptions.plist

      - name: Upload iOS Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: |
            ios/DerivedData/Build/Products/
            ios/Export/*.ipa
          retention-days: 30

      - name: Clean up keychain and provisioning profile
        if: ${{ always() && github.event.inputs.build_type == 'production' }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  deploy-testflight:
    name: Deploy to TestFlight
    runs-on: macos-latest
    needs: build-ios
    if: github.event.inputs.build_type == 'production' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download iOS build
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: ios-build/

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          # Create API key file
          echo -n "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode --output AuthKey.p8

          # Upload to TestFlight
          xcrun altool --upload-app \
                       --type ios \
                       --file ios-build/Export/*.ipa \
                       --apiKey $APP_STORE_CONNECT_API_KEY_ID \
                       --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID \
                       --apiKeyFile AuthKey.p8

  deploy-internal:
    name: Deploy to Internal Testing
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/mobile-app'

    steps:
      - name: Download Android APK
        if: needs.build-android.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: android-build/

      - name: Download iOS build
        if: needs.build-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: ios-build/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.run_number }}
          release_name: Mobile Build ${{ github.run_number }}
          body: |
            Automated mobile app build from commit ${{ github.sha }}

            ## Changes
            ${{ github.event.head_commit.message }}

            ## Downloads
            - Android APK: Available in build artifacts
            - iOS Build: Available in build artifacts (requires iOS device or simulator)

            ## Testing
            - Download the appropriate file for your platform
            - For Android: Install the APK directly
            - For iOS: Use Xcode or deploy to device
          draft: false
          prerelease: true
